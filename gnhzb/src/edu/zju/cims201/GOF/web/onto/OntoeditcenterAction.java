
/*
 * Generated by MyEclipse Struts
 * Template path: templates/java/JavaClass.vtl
 */
package edu.zju.cims201.GOF.web.onto;



import java.io.File;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Collection;
import java.util.HashMap;
import java.util.Iterator;
import java.util.List;
import java.util.Map;
import java.util.Set;

import javax.annotation.Resource;
import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;
import javax.xml.parsers.ParserConfigurationException;

import org.apache.commons.collections.map.HashedMap;


import org.apache.struts2.convention.annotation.Namespace;
import org.apache.struts2.convention.annotation.Result;
import org.apache.struts2.convention.annotation.Results;
import org.apache.struts2.interceptor.ServletResponseAware;


import com.hp.hpl.jena.ontology.Individual;
import com.hp.hpl.jena.ontology.OntClass;
import com.hp.hpl.jena.ontology.OntModel;
import com.hp.hpl.jena.ontology.OntProperty;
import com.hp.hpl.jena.ontology.OntResource;
import com.hp.hpl.jena.ontology.UnionClass;
import com.hp.hpl.jena.query.Query;
import com.hp.hpl.jena.query.QueryExecution;
import com.hp.hpl.jena.query.QueryExecutionFactory;
import com.hp.hpl.jena.query.QueryFactory;
import com.hp.hpl.jena.query.ResultSet;
import com.hp.hpl.jena.rdf.model.NodeIterator;
import com.hp.hpl.jena.rdf.model.RDFNode;
import com.hp.hpl.jena.util.iterator.ExtendedIterator;


import edu.zju.cims201.GOF.dao.knowledge.OwlWeblogDao;
import edu.zju.cims201.GOF.hibernate.pojo.MetaKnowledge;
import edu.zju.cims201.GOF.hibernate.pojo.OntoBuild;
import edu.zju.cims201.GOF.hibernate.pojo.OwlWedlog;
import edu.zju.cims201.GOF.hibernate.pojo.SystemUser;

import edu.zju.cims201.GOF.rs.dto.MessageDTO;
import edu.zju.cims201.GOF.rs.dto.OWLFileDTO;
import edu.zju.cims201.GOF.rs.dto.ObjectDTO;
import edu.zju.cims201.GOF.rs.dto.OntoBuildDTO;
import edu.zju.cims201.GOF.rs.dto.PageDTO;
import edu.zju.cims201.GOF.rs.dto.TreeNodeDTO;
import edu.zju.cims201.GOF.service.onto.OntoCommentService;
import edu.zju.cims201.GOF.service.onto.OntoFileService;
import edu.zju.cims201.GOF.service.onto.OntologyService;
import edu.zju.cims201.GOF.service.systemUser.UserService;
import edu.zju.cims201.GOF.util.Constants;
import edu.zju.cims201.GOF.util.JSONUtil;
import edu.zju.cims201.GOF.util.ontology.ClassProp;

import edu.zju.cims201.GOF.util.ontology.IndivDTO;

import edu.zju.cims201.GOF.util.ontology.PropNode;
import edu.zju.cims201.GOF.web.CrudActionSupport;

/**
 * 属性管理Action.
 * 
 * 使用Struts2 convention-plugin annotation定义Action参数. 
 * 
 * @author hebi
 */
// 定义URL映射对应/ktype/property.action
@Namespace("/")
// 定义名为reload的result重定向到property.action, 其他result则按照convention默认.
@Results( { @Result(name = CrudActionSupport.RELOAD, location = "ontoeditcenter.action", type = "redirect"),@Result(name = "questionview", location = "/aaa.jsp")})
public class OntoeditcenterAction extends CrudActionSupport<MetaKnowledge> implements
ServletResponseAware {	
	
	@Resource(name="ontologyServiceImpl")
	private OntologyService ontologyService;
	@Resource(name="ontoFileServiceImpl")
	private  OntoFileService fileService;
	@Resource(name = "userServiceImpl")
	private UserService userservice;
	@Resource(name = "ontoCommentServiceImpl")
	private OntoCommentService commentservice;
	private HttpServletResponse response;
	
	public HttpServletResponse getResponse() {
		return response;
	}

	public void setResponse(HttpServletResponse response) {
		this.response = response;
	}

	private String owlFileName;
	private String indivName;
//	private String filepath;
	private String classURI;
	private String versionName;
	private String localversionName;

	private String formvalue;


	private HashedMap mapLog;
	private TreeNodeDTO treenode;
	/*
	 * Generated Methods
	 */
	public String getFormvalue() {
		return formvalue;
	}

	public void setFormvalue(String formvalue) {
		this.formvalue = formvalue;
	}
	private int size;
	private int index;
	public int getSize() {
		return size;
	}

	public void setSize(int size) {
		this.size = size;
	}

	public int getIndex() {
		return index;
	}

	public void setIndex(int index) {
		this.index = index;
	}

	public TreeNodeDTO getTreenode() {
		return treenode;
	}

	public void setTreenode(TreeNodeDTO treenode) {
		this.treenode = treenode;
	}






	public HashedMap getMapLog() {
		return mapLog;
	}

	public void setMapLog(HashedMap mapLog) {
		this.mapLog = mapLog;
	}

	public String getIndivName() {
		return indivName;
	}

//	public String getFilepath() {
//		return filepath;
//	}
//
//	public void setFilepath(String filepath) {
//		this.filepath = filepath;
//	}

	public String getClassURI() {
		return classURI;
	}

	public void setClassURI(String classURI) {
		this.classURI = classURI;
	}


	public void setIndivName(String indivName) {
		this.indivName = indivName;
	}

	public String getOwlFileName() {
		return owlFileName;
	}

	public void setOwlFileName(String owlFileName) {
		this.owlFileName = owlFileName;
	}

	
	

	public MetaKnowledge getModel() {
		// TODO Auto-generated method stub
		return null;
	}

	public void setServletResponse(HttpServletResponse response) {
		this.response = response;
		
	}
	
	//新建本体文件
	public String addnewfile()  {

		
		String versionName=fileService.getVersionName();
	
	
		
		try {
			ontologyService.writeOwlFile(versionName, owlFileName);
		} catch (Exception e) {
			// TODO 自动生成 catch 块
		
			e.printStackTrace();
			JSONUtil.write(response, "owl文件保存出错");
			return null;
			
		}
		JSONUtil.write(response, "新建成功，新文件名称为"+versionName);
		
		return null;
			
	}
	
	//列出当前系统本体文件状态
	public void getSystemontofile()
	{

		
		localversionName=fileService.getLocalFilePath();
		localversionName=localversionName.substring(localversionName.lastIndexOf("\\")+1);
		//request.setAttribute("localversionName", localversionName);
		String owlDIR=Constants.LOCAL_ONTO_FILE_DIR_PATH;
		//request.setAttribute("owlDIR", owlDIR);
		localversionName="当前系统文件为："+localversionName+"   文件路径为："+owlDIR;	
		
		JSONUtil.write(response, localversionName);
		
	}
	//列出当前系统中的所有本体文件
	public void listontofile() {
	    
		List<OWLFileDTO> owlfiles=fileService.getOWLFile(fileService.getFileDIR());
		System.out.println(owlfiles.size());
		JSONUtil.write(response, owlfiles);
		
	}
	@Override
	public String list() throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String input() throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String save() throws Exception {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public String delete() throws Exception {

		// TODO Auto-generated method stub
		
		
		OntModel ontModel=ontologyService.getModel_1(owlFileName);
		Map NSmap = ontModel.getNsPrefixMap();
		String NS=(String) NSmap.get(Constants.ONTO_NAMESPACE);
		String individualURI=NS+indivName;
		Individual individual=ontModel.getIndividual(individualURI);
		
		if(individual==null){
			
			JSONUtil.write(response, "实例不存在");
			return null;
		}
	
		
		synchronized(ontologyService.getModel_1(owlFileName)){
			individual.remove();
			try {
				ontologyService.writeOwlFile(owlFileName);
				
			} catch (Exception e1) {
				// TODO 自动生成 catch 块
				e1.printStackTrace();
				JSONUtil.write(response, "错误！文件保存不成功！");
				return null;
			}
			
			ontologyService.clearModelAll(owlFileName);
		}
		SystemUser user =userservice.getUser();
		OwlWedlog owlWedlog=new OwlWedlog();
		owlWedlog.setOwlfilename(owlFileName);
		owlWedlog.setOperationobject(indivName);
		owlWedlog.setTimesample(new java.util.Date(System
				.currentTimeMillis()));
		owlWedlog.setUserEmail(user.getEmail());
		owlWedlog.setUsername(user.getName());
		owlWedlog.setOperationtype("删除实例\""+indivName+"\"及其相关属性、关系");
		 ontologyService.addowlweblog(owlWedlog);
		JSONUtil.write(response, "删除成功");
		return null;
	

	}

	@Override
	protected void prepareModel() throws Exception {
		// TODO Auto-generated method stub
		
	}
	public String toEditCenter() {
		return null;
		
	}
	
	public String owleidtlogshow() {
		System.out.println(owlFileName);
		PageDTO pd = new PageDTO();
	    List<OwlWedlog>ontologlist=  ontologyService.getowlweblog(owlFileName);
	  
	List<OwlWedlog> subList = new ArrayList<OwlWedlog>();
		
		for(int i=index*size;i<((index+1)*size<ontologlist.size()?(index+1)*size:ontologlist.size());i++){
			OwlWedlog owltemp=ontologlist.get(i);
			owltemp.setTimestr(owltemp.getTimesample().toLocaleString());
			subList.add(owltemp);
		}
		
//		System.out.println("list_mDTO size:"+messageListDTO.size()+"_"+subList.size());
		
		pd.setData(subList);
		pd.setTotal(ontologlist.size());
		
		int totalPage;
		if(size != 0) {
			if(ontologlist.size()%size == 0){
				totalPage = ontologlist.size()/size;
			}else{
				totalPage = ontologlist.size()/size+1;
			}
			pd.setTotalPage(ontologlist.size()/size+1);
			
		}		
		
	    
	    
		JSONUtil.write(response, pd);
		return null;
	}
	
	
	public String DeleteFile() {

		
		owlFileName=owlFileName.replace("\\", File.separator);
		File currentFile=fileService.getFile("default");
		File deleteFile=new File(fileService.getFileDIR()+"\\"+owlFileName);
		if(deleteFile.isFile()&&deleteFile.equals(currentFile)){
			JSONUtil.write(response, "删除失败，删除文件为系统文件！");
			return null;
		}else if(deleteFile.isDirectory()&&currentFile.getAbsolutePath().contains(deleteFile.getAbsolutePath())){
			JSONUtil.write(response, "删除失败，删除文件夹为系统文件夹！");
			
			return null;
		}
		System.out.println(fileService.getFileDIR()+"\\"+owlFileName);
		ontologyService.clearModelAll(owlFileName);
		fileService.deleteFile(owlFileName);
		JSONUtil.write(response, "删除成功！");
		//return mapping.findForward("deleteSuccess");
		return null;
	}
	
	
	
	public void SetSystemFile() {

		owlFileName=owlFileName.replace("\\", File.separator);
		ArrayList<String> errors=new ArrayList<String>();
	
		String newfilepath=fileService.getFileDIR()+"\\"+owlFileName;
		File newfile=new File(newfilepath);
		if(newfile.isDirectory())
			errors.add("设定失败，勿设定文件夹");
		try {
			fileService.setLocalFilePath(newfilepath);
		} catch (IOException e) {
			// TODO 自动生成 catch 块
			e.printStackTrace();
			errors.add("保存文件错误");
		}
		ontologyService.clearModel_1(owlFileName);
		if(errors.size()!=0){
		
			JSONUtil.write(response, "设置失败");
		}else{

			JSONUtil.write(response, "设置成功");
		}
		
	}
	

	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public String FindClassPropsUI() {
		// TODO Auto-generated method stub	
		
		if(classURI.contains(":"))
			classURI=classURI.substring(classURI.indexOf(":")+1);
	
		if(classURI==null||owlFileName==null)
			return null;
		
		List<PropNode> stringProps=new ArrayList<PropNode>();
		List<PropNode> thingProps=new ArrayList<PropNode>();
	
		
		OntModel model=ontologyService.getModel_1(owlFileName);
		Map NSmap = model.getNsPrefixMap();
		String NS=(String) NSmap.get(Constants.ONTO_NAMESPACE);
		String ontClassURI=NS+classURI;
	    
		OntClass ontclass=model.getOntClass(ontClassURI);
		 List<OntProperty> propsIT= ontologyService.getOntPropertyList(owlFileName, ontclass);
			
			
			for(OntProperty prop:propsIT){
			//OntProperty prop=(OntProperty) propIT.next();
			PropNode node=new PropNode();
			String propURI=prop.getURI();
			String propName=propURI.substring(propURI.indexOf("#")+1);
			node.setName(propName);
			node.setPropURI(propURI);
			
			if(prop.isDatatypeProperty()){
				stringProps.add(node);
				
			}else {//objectProperty
				
			     List<TreeNodeDTO> rangList=new ArrayList<TreeNodeDTO>();
				 ExtendedIterator     rangClassIterator;
				 ExtendedIterator rangIterator=prop.listRange(); 
				 HashedMap hs=new HashedMap();
				 while (rangIterator.hasNext()){ 
				
				 OntClass rangClass=(OntClass)rangIterator.next(); 
				 if(rangClass.isUnionClass()){ 
				          UnionClass unionClass=rangClass.asUnionClass(); 
				         rangClassIterator=unionClass.listOperands(); 
				    	 while(rangClassIterator.hasNext()){ 
							 OntResource itemClass=(OntResource)rangClassIterator.next(); 
							 TreeNodeDTO tempnode=new TreeNodeDTO();
							 tempnode.setName(itemClass.getLocalName());
							 tempnode.setNodeDescription(itemClass.getURI());
							 if(!hs.containsKey(itemClass.getURI())){
							 rangList.add(tempnode);
							 hs.put(itemClass.getURI(), tempnode);
							 }
							  // System.out.println("unclassobjectrangClass:"+itemClass.getLocalName()); 
							 //  System.out.println("unclassobjectrangClassuri:"+itemClass.getURI()); 

							 } 		
				 }else{
					
						 OntResource itemClass=(OntResource)rangClass; 		
						 // System.out.println(" objectrangClass:"+itemClass.getLocalName()); 
						  // System.out.println("objectrangClassuri:"+itemClass.getURI()); 
					 if(!itemClass.getURI().equals("http://www.w3.org/2002/07/owl#Thing")&&!itemClass.getURI().equals("http://www.w3.org/2000/01/rdf-schema#Resource")){
						 TreeNodeDTO tempnode=new TreeNodeDTO();
						 tempnode.setName(itemClass.getLocalName());
					     tempnode.setNodeDescription(itemClass.getURI());
					     if(!hs.containsKey(itemClass.getURI())){
							 rangList.add(tempnode);
							 hs.put(itemClass.getURI(), tempnode);
							 }
					     
					     }
				
				 } 
				 } 
				 if(rangList.isEmpty())
				 { System.out.println("在这里添加的tree");
					 treenode=new TreeNodeDTO();
			     WriteClassXml(owlFileName, null);
				 rangList.add(treenode);}
				 node.setPropRange(rangList);
				
				thingProps.add(node);
				
			}
			if(prop.isFunctionalProperty())
				node.setPropType("FunctionalProperty");
		}
		
		ClassProp classStringProp=new ClassProp(ontClassURI,stringProps);
		ClassProp classThingProp=new ClassProp(ontClassURI,thingProps);
		List<ClassProp> allProp =new ArrayList<ClassProp>();
		allProp.add(classStringProp);
		allProp.add(classThingProp);
		JSONUtil.write(response, allProp);
		//如另存为，则新版本名为versionName

			
	
		return null;
	}
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public String addIndivs() {
		
		
		if(classURI.contains(":"))
			classURI=classURI.substring(classURI.indexOf(":")+1);
		
		
		//String tag=request.getParameter("tag");
		
		if(classURI==null||owlFileName==null)
			return null;
		
		System.out.println(classURI);
		System.out.println(owlFileName);
		OntModel model=ontologyService.getModel_1(owlFileName);
		Map NSmap = model.getNsPrefixMap();
		String NS=(String) NSmap.get(Constants.ONTO_NAMESPACE);
		String ontClassURI=NS+classURI;
		OntClass ontclass=model.getOntClass(ontClassURI);
	
		
		ExtendedIterator indivsIT = ontclass.listInstances(true);
		List<IndivDTO>  IndivList=new ArrayList<IndivDTO>();
		while(indivsIT.hasNext()){
			Individual indiv=(Individual) indivsIT.next();
			IndivList.add(new IndivDTO(indiv.getLocalName(),indiv.getNameSpace()));
		}
		
	
		JSONUtil.write(response, IndivList);
		return null;
	}
	
	
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public String findIndivPropsWithValue() {
		// TODO Auto-generated method stub

		ArrayList<String> errors=new ArrayList<String>();
		if(indivName==null||owlFileName==null)
		{	JSONUtil.write(response, "不能查空术语！");
			return null;
		}
		List<PropNode> stringPropsValues=new ArrayList<PropNode>();
		List<PropNode> thingPropsValues=new ArrayList<PropNode>();
		
	
		OntModel model=ontologyService.getModel_1(owlFileName);
		long t=System.currentTimeMillis();
		Map NSmap = model.getNsPrefixMap();
		System.out.println("执行1耗时 : "+(System.currentTimeMillis()-t)+"毫秒 ");
		
		String NS=(String) NSmap.get(Constants.ONTO_NAMESPACE);
		String ontIndivURI=NS+indivName;
		//System.out.println(ontIndivURI);
		Individual individual=model.getIndividual(ontIndivURI);
		System.out.println("执行2耗时 : "+(System.currentTimeMillis()-t)+"毫秒 ");
		
		if(individual==null){
			errors.add("实例不存在！");
			JSONUtil.write(response, "实例不存在！");
			return null;
		}
	    //耗时较长
		OntClass ontclass=individual.getOntClass(true);
		System.out.println("执行3耗时 : "+(System.currentTimeMillis()-t)+"毫秒 ");
		
		 List<OntProperty> propsIT= ontologyService.getOntPropertyList(owlFileName, ontclass);
		
		
			
		for(OntProperty prop:propsIT){
			
			String propRange=prop.getRange().getURI();
			String localname=prop.getLocalName();		
			//System.out.println("本体"+localname);
			String propURI=prop.getURI();
			PropNode propNode=new PropNode();
			propNode.setName(localname);
			propNode.setPropURI(propURI);
				if(prop.isDatatypeProperty()){
				RDFNode nodeValue = individual.getPropertyValue(prop);
				String strValue="";
				if(nodeValue!=null){
					strValue=nodeValue.toString();
					if(strValue.contains("^"))
						strValue=strValue.substring(0, strValue.indexOf("^"));
				}
				propNode.setPropValue(strValue);
				stringPropsValues.add(propNode);
				
			}else {//objectProperty
                 List<TreeNodeDTO> rangList=new ArrayList<TreeNodeDTO>();
				 ExtendedIterator     rangClassIterator;
				 ExtendedIterator rangIterator=prop.listRange(); 
				 HashedMap hs=new HashedMap();
				 while (rangIterator.hasNext()){ 
				
				 OntClass rangClass=(OntClass)rangIterator.next(); 
				 if(rangClass.isUnionClass()){ 
				          UnionClass unionClass=rangClass.asUnionClass(); 
				         rangClassIterator=unionClass.listOperands(); 
				    	 while(rangClassIterator.hasNext()){ 
							 OntResource itemClass=(OntResource)rangClassIterator.next(); 
							 TreeNodeDTO tempnode=new TreeNodeDTO();
							 tempnode.setNodeDescription(itemClass.getURI());
							 tempnode.setName(itemClass.getLocalName());
							// tempnode.setPropURI(itemClass.getURI());
							 if(!hs.containsKey(itemClass.getURI())){
								 rangList.add(tempnode);
								 hs.put(itemClass.getURI(), tempnode);
								 }
							 //  System.out.println("unclassobjectrangClass:"+itemClass.getLocalName()); 
							 //  System.out.println("unclassobjectrangClassuri:"+itemClass.getURI()); 

							 } 		
				 }else{
					
						 OntResource itemClass=(OntResource)rangClass; 		
						 //  System.out.println(" objectrangClass:"+itemClass.getLocalName()); 
						  // System.out.println("objectrangClassuri:"+itemClass.getURI()); 
					 if(!itemClass.getURI().equals("http://www.w3.org/2002/07/owl#Thing")&&!itemClass.getURI().equals("http://www.w3.org/2000/01/rdf-schema#Resource")){
						 TreeNodeDTO tempnode=new TreeNodeDTO();
						 tempnode.setNodeDescription(itemClass.getURI());
						 tempnode.setName(itemClass.getLocalName());
						 if(!hs.containsKey(itemClass.getURI())){
							 rangList.add(tempnode);
							 hs.put(itemClass.getURI(), tempnode);
							 }}
				 } 
				 } 	
				 if(rangList.isEmpty())
				 {System.out.println("在这里添加的tree");
				    treenode=new TreeNodeDTO();
					WriteClassXml(owlFileName, null);
					 rangList.add(treenode);
				}
				 propNode.setPropRange(rangList);
				NodeIterator nodeIT = individual.listPropertyValues(prop);
				String strValue="";
				while(nodeIT.hasNext()){
					RDFNode nodeValue=(RDFNode) nodeIT.next();
					String temp=null;
					if(nodeValue!=null){
						temp=nodeValue.toString();
						temp=temp.substring(temp.indexOf("#")+1);
					}
					strValue+=temp+",";
					
				}
				if(!strValue.equals(""))
					strValue=strValue.substring(0, strValue.length()-1);
				propNode.setPropValue(strValue);
				thingPropsValues.add(propNode);
				
			}
			
			if(prop.isFunctionalProperty()){
				propNode.setPropType("FunctionalProperty");
			}else{
				propNode.setPropType("Property");
			}
			
		
		
		
		
	}
		
		List allProp =new ArrayList<ClassProp>();
		allProp.add(stringPropsValues);
		allProp.add(thingPropsValues);
		JSONUtil.write(response, allProp);
		return null;
//		 versionName=fileService.getVersionName();
//		
//		
//		String localversionName=fileService.getLocalFilePath();
//		if(owlFileName.equals("default")){
//			localversionName=localversionName.replace(Constants.LOCAL_ONTO_FILE_DIR_PATH, "");
//		}else
//			localversionName=owlFileName;	

		
	}
	/** 
	 * Method execute
	 * @param mapping
	 * @param form
	 * @param request
	 * @param response
	 * @return ActionForward
	 */
	public String deleteIndividual() {				
		if(indivName==null||owlFileName==null)
			return null;
		if(owlFileName.contains("%5C"))
			owlFileName=owlFileName.replace("%5C", "\\");	
		String localversionName=fileService.getVersionName();	
		return "deleteIndividual";
	}
	public String editowl()	{
		
		HashMap hpropertyValues =getJSONvalue();
			 mapLog=new HashedMap();

	
		
				Individual individual;
	       if(null!=hpropertyValues.get("className"))
			classURI=hpropertyValues.get("className").toString() ;
			owlFileName=hpropertyValues.get("owlFileName").toString() ;
			if(owlFileName==null){
				JSONUtil.write(response, "出现错误，本体文件"+owlFileName+"没有找到！");
				return null;
				}
			OntModel ontModel=ontologyService.getModel_1(owlFileName);	
			if(null!=hpropertyValues.get("indivName"))
			indivName=hpropertyValues.get("indivName").toString() ;
			if(indivName==null||indivName.trim().equals("")){
				JSONUtil.write(response, "出现错误，需要添加或修改的术语名称不存在！");
				return null;
				}
			Map NSmap = ontModel.getNsPrefixMap();
			String nameSpace=(String) NSmap.get(Constants.ONTO_NAMESPACE);
			String individualURI=nameSpace+indivName;
			OntClass ontClass;
			String suffix;
			String suffix2;
			if(null!=classURI)
			{ 	suffix="添加";
			    suffix2="添加";
			   ontClass=ontModel.getOntClass(nameSpace+classURI);
			   individual=ontModel.getIndividual(individualURI);
			   if(null!=individual)
				{JSONUtil.write(response, "出现错误，需要添加的术语已经存在！");
			    return null;
			    }
			   individual=ontModel.createIndividual(nameSpace+indivName,ontClass);
			}
			else{
				 suffix="修改";
				   suffix2="新";
			
				 individual=ontModel.getIndividual(individualURI);
				  if(null==individual)
					{JSONUtil.write(response, "出现错误，需要修改的术语不存在！");
				    return null;
				    }
				 ontClass=individual.getOntClass(true);
			}
		
			 List<OntProperty> propsIT= ontologyService.getOntPropertyList(owlFileName, ontClass);
				
			//synchronized(ontologyService.getModel_1(owlFileName)){
				for(OntProperty prop:propsIT){
					long t=System.currentTimeMillis();
				
						
					String localname=prop.getLocalName();
					String propValue=hpropertyValues.get(localname).toString();//
					System.out.println(localname+"="+propValue);
					
					System.out.println("获取属性"+prop.getLocalName()+"执行耗时 : "+(System.currentTimeMillis()-t)+"毫秒 ");
					long q=System.currentTimeMillis();
				     boolean isdata=	prop.isDatatypeProperty();
					System.out.println("判断属性类型执行耗时 : "+(System.currentTimeMillis()-q)+"毫秒 ");
	
					
				//	individual.removeAll(prop);
					if(propValue!=null){
						if(isdata){
							long a=System.currentTimeMillis();
//							RDFNode tmpnode=individual.getPropertyValue(prop);
//							System.out.println("获取属性"+prop.getLocalName()+"值类型执行耗时 : "+(System.currentTimeMillis()-a)+"毫秒 ");
//							if(tmpnode!=null&&!tmpnode.toString().equals(propValue)){
//								System.out.println("执行修改了操作");
//								long o=System.currentTimeMillis();
//								
//								System.out.println("删除属性"+prop.getLocalName()+"值类型执行耗时 : "+(System.currentTimeMillis()-o)+"毫秒 ");
								individual.removeAll(prop);
//								long c=System.currentTimeMillis();
								individual.addProperty(prop, propValue);
//								System.out.println("添加属性"+prop.getLocalName()+"值类型执行耗时 : "+(System.currentTimeMillis()-c)+"毫秒 ");
//								
//								mapLog.put("1"+prop.getLocalName(), propValue);
//									
//							}else {if(tmpnode==null){
//								System.out.println("执行修改了操作");
//								individual.addProperty(prop, propValue);
//								mapLog.put("1"+prop.getLocalName(), propValue);
//							}
//							else
//								System.out.println("没有修改了操作");
//							}
							System.out.println("修改数据属性"+prop.getLocalName()+"执行耗时 : "+(System.currentTimeMillis()-a)+"毫秒 ");
							
					}
						else {
							long b=System.currentTimeMillis();
							NodeIterator oldnodeIT = individual.listPropertyValues(prop);
							
							//删除inverse的属性
							OntProperty inverseprop=prop.getInverseOf();
							if(null!=inverseprop)
							{
							List<Individual> dellist=new ArrayList<Individual>();	
							while(oldnodeIT.hasNext()){
							RDFNode oldnodeValue=(RDFNode) oldnodeIT.next();
							String temp=null;
							if(oldnodeValue!=null){
								temp=oldnodeValue.toString();
								temp=temp.substring(temp.indexOf("#")+1);
							}
						
							System.out.println("反转属性值"+temp);
							String inverseindividualURI=nameSpace+temp;		
							Individual inverseindividual=ontModel.getIndividual(inverseindividualURI);
							
							dellist.add(inverseindividual);
							//inverseindividual.removeProperty(inverseprop, inverserdfNode);
							
							}
							RDFNode inverserdfNode=ontModel.getResource(individualURI);	
							for (Individual inverseindividual : dellist) {
								System.out.println("反转删除 "+inverseindividual.getLocalName());
								inverseindividual.removeProperty(inverseprop, inverserdfNode);
							}
							
							}
							individual.removeAll(prop);
							String[] propVList=propValue.split(",");
							for(String propVTemp:propVList){
						
								RDFNode rdfNode=ontModel.getResource(nameSpace+propVTemp);								
								individual.addProperty(prop, rdfNode);
								
								}
							String changeValue="";
							
							
							for(String propVTemp:propVList){
									changeValue+=propVTemp+",";		
							}
							
							
							mapLog.put("2"+prop.getLocalName(), changeValue.equals("")?"null":changeValue.substring(0, changeValue.length()-1));	
							System.out.println("修改对象属性"+prop.getLocalName()+"执行耗时 : "+(System.currentTimeMillis()-b)+"耗 秒 ");
							}
							
							
						}
					System.out.println("修改属性"+prop.getLocalName()+"执行耗时 : "+(System.currentTimeMillis()-t)+"毫秒 ");
					
					}
				
				try {
					long a=System.currentTimeMillis();
					ontologyService.writeOwlFile(owlFileName);
					System.out.println("保存执行耗时 : "+(System.currentTimeMillis()-a)+"耗秒 ");
				} catch (Exception e) {
					// TODO 自动生成 catch 块
					e.printStackTrace();
				}
			//	ontologyService.clearModelAll(owlFileName);
		//	}
			JSONUtil.write(response, "修改成功！");
			//添加日志
			String operation=null;
			String props="";
			String relation="";
			if(null!=mapLog&&!mapLog.isEmpty()){
			for(Object key:mapLog.keySet()){
				String keyString=(String)key;
				if(keyString.startsWith("1")){
					props+=suffix+"属性\""+keyString.substring(1)+"\""+suffix2+"值:"+(String)mapLog.get(key)+"；";
				}else if(keyString.startsWith("2")){
					relation+=suffix+"关系\""+keyString.substring(1)+"\""+suffix2+"值:"+(String)mapLog.get(key)+"；";
				}
			}
			}
			operation=props+relation;
			if(operation==null)
				return null;
			if((indivName!=null)&&(!indivName.equals("")))
				operation=suffix+"术语"+indivName+"；"+operation;
			
			operation=operation.substring(0, operation.length()-1);
			System.out.println(operation);
			
		
			
			SystemUser user =userservice.getUser();
			OwlWedlog owlWedlog=new OwlWedlog();
			owlWedlog.setOwlfilename(owlFileName);
			owlWedlog.setOperationobject(indivName);
			owlWedlog.setTimesample(new java.util.Date(System
					.currentTimeMillis()));
			owlWedlog.setUserEmail(user.getEmail());
			owlWedlog.setUsername(user.getName());
			owlWedlog.setOperationtype(operation);
		    ontologyService.addowlweblog(owlWedlog);
		    individual=ontModel.getIndividual(individualURI);
			
			
			
			return null;
		}	
//类别术语树建立
	public void owlIndividualWrite()
	{
		
		  if(null!=owlFileName&&owlFileName.equals("default"))
        	  owlFileName=Constants.LOCAL_ONTO_FILE_PATH.substring(Constants.LOCAL_ONTO_FILE_PATH.lastIndexOf("\\")+1);
		      WriteIndividualXml(owlFileName); 
		      List<TreeNodeDTO> dtos=new ArrayList<TreeNodeDTO>();
			  dtos.add(treenode);
			 JSONUtil.write(response,dtos);
	}
	
	public void isIndividualExist()
	{
		OntModel model=ontologyService.getModel_2("default");
	
		Map NSmap = model.getNsPrefixMap();
		
		String NS=(String) NSmap.get(Constants.ONTO_NAMESPACE);
		String ontIndivURI=NS+indivName;
		
		Individual individual=model.getIndividual(ontIndivURI);
		
		
		if(individual==null){
		
			JSONUtil.write(response, "术语不存在！");
			
		}
		else
			
				
			JSONUtil.write(response, "术语存在！");
	
	
	}
	
	
	
	private   void   WriteIndividualXml(String owlFileName){
		OntModel ontModel=ontologyService.getModel_2(owlFileName);
	//	if(parentid==null){
		if(treenode==null)
		    treenode=new TreeNodeDTO();
		    treenode.setName("类别");
		    treenode.setNodeDescription("owl:Thing");
		    index++;
		    treenode.setId(index);   
		    Map NSmap = ontModel.getNsPrefixMap();
			String nameSpace=(String) NSmap.get(Constants.ONTO_NAMESPACE);
			OntClass ontClass=  ontModel.getOntClass(nameSpace+"类别");
			ArrayList<TreeNodeDTO> sublist=new ArrayList<TreeNodeDTO>();
			for(Iterator< Individual> i=ontClass.listInstances();i.hasNext();){
	
				Individual individual = i.next();
				TreeNodeDTO subtreenode=new TreeNodeDTO();
    			subtreenode.setNodeDescription(individual.getLocalName());
    		    subtreenode.setName(individual.getLocalName());
    		    index++;
    		    subtreenode.setId(index);
    		    sublist.add(subtreenode);
			}	
			treenode.setChildren(sublist);
	}
//得到具体某个分类或者所有的术语列表 用indivName是否为null来判断
	public void writeIndividualList()
	{   
	
		 if(null!=owlFileName&&owlFileName.equals("default"))
       	  owlFileName=Constants.LOCAL_ONTO_FILE_PATH.substring(Constants.LOCAL_ONTO_FILE_PATH.lastIndexOf("\\")+1);
	
		 OntModel ontModel=ontologyService.getModel_2(owlFileName);
		  String sparql="PREFIX unnamed:<http://www.owl-ontologies.com/unnamed.owl#> " +
			"PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#> " +
			"SELECT ?term " +
			"WHERE {" +
			 "?term unnamed:范畴  unnamed:"+indivName+"." +
					"?term  rdf:type unnamed:术语  }";
		  if(null==indivName)
		  {
			  
			  sparql="PREFIX unnamed:<http://www.owl-ontologies.com/unnamed.owl#> " +
				"PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#> " +
				"SELECT ?term " +
				"WHERE {" +
						"?term  rdf:type unnamed:术语  }";
		  }
		 // System.out.println(sparql);
			Query query = QueryFactory.create(sparql);
			QueryExecution qexec = QueryExecutionFactory.create(query, ontModel);
			ResultSet rs = qexec.execSelect();
			List<OntoBuildDTO>individuallist=new ArrayList<OntoBuildDTO>();
			while(rs.hasNext()){
				//System.out.println(rs.next().getClass());
				com.hp.hpl.jena.rdf.model.Resource resource = rs.nextSolution().getResource("term");
				OntoBuildDTO tempdto=new OntoBuildDTO();
				tempdto.setOntoname(resource.getLocalName());
				tempdto.setClassname(indivName);
				individuallist.add(tempdto);
				// System.out.println("名称："+resource.getLocalName());
			}
		   
			  
			List<OntoBuildDTO> subList = new ArrayList<OntoBuildDTO>();

			
				for(int i=index*size;i<((index+1)*size<individuallist.size()?(index+1)*size:individuallist.size());i++){
					OntoBuildDTO tempdto=individuallist.get(i);
					String shuyuname=tempdto.getOntoname();
					if(null==indivName)
					{
						  
						  String sparql2="PREFIX unnamed:<http://www.owl-ontologies.com/unnamed.owl#> " +
							"PREFIX rdf:<http://www.w3.org/1999/02/22-rdf-syntax-ns#> " +
							"SELECT ?term " +
							"WHERE {" +
							 "unnamed:"+shuyuname+" unnamed:范畴  ?term."+
									"?term  rdf:type unnamed:类别  }";	
						//	System.out.println(sparql2);
						  Query query2 = QueryFactory.create(sparql2);
							QueryExecution qexec2 = QueryExecutionFactory.create(query2, ontModel);
							ResultSet rs2 = qexec2.execSelect();
				            String tmepfanchouname="";
							while(rs2.hasNext()){
							
								com.hp.hpl.jena.rdf.model.Resource resource = rs2.nextSolution().getResource("term");
    							tmepfanchouname+=resource.getLocalName();
							//	 System.out.println("名称："+resource.getLocalName());
							}
							tempdto.setClassname(tmepfanchouname);
							tempdto.setOntoname(shuyuname);
					}	
							System.out.println("shuyuname="+shuyuname);
						OntoBuild tempontobuild=	commentservice.getOntoBuild(shuyuname);
						if(null!=tempontobuild)
						{
							tempdto.setHasExplain(tempontobuild.isHasExplain());
							tempdto.setCreatername(tempontobuild.getCreater().getName());
							tempdto.setCreateremail(tempontobuild.getCreater().getEmail());
							tempdto.setOntocommentcount(commentservice.getComments(tempontobuild,null).size());
							tempdto.setCreattime(tempontobuild.getCreattime().toLocaleString());
						}
						else
						{
							tempdto.setHasExplain(false);
							tempdto.setOntocommentcount(0);
							tempdto.setCreattime("/");
							
						}
						
						
					
					subList.add(tempdto);
				}
				
			PageDTO pd = new PageDTO();
			pd.setData(subList);
			pd.setTotal(individuallist.size());
			int totalPage;
	
			if(size != 0) {
				if(individuallist.size()%size == 0){
					totalPage = individuallist.size()/size;
				}else{
					totalPage = individuallist.size()/size+1;
				}
				pd.setTotalPage(totalPage);
				
			}		
			
		    
		    
			JSONUtil.write(response, pd);
		
	}
//本体class树建立
	public void owlClassWrite(){
	          if(null!=owlFileName&&owlFileName.equals("default"))
	        	  owlFileName=Constants.LOCAL_ONTO_FILE_PATH.substring(Constants.LOCAL_ONTO_FILE_PATH.lastIndexOf("\\")+1);
			  WriteClassXml(owlFileName,null);    
			  List<TreeNodeDTO> dtos=new ArrayList<TreeNodeDTO>();
			  dtos.add(treenode);
		//	  System.out.println(treenode.getCode());
			  
			 JSONUtil.write(response,dtos);
		
	
	}
	
	
	private   void   WriteClassXml(String owlFileName,String parentid){
		OntModel ontModel=ontologyService.getModel_2(owlFileName);
	//	if(parentid==null){
		if(treenode==null)
		    treenode=new TreeNodeDTO();
		    treenode.setName("本体类");
		    treenode.setNodeDescription("owl:Thing");
		    index++;
		    treenode.setId(index);
		   
			for(Iterator< OntClass> i=ontModel.listHierarchyRootClasses();i.hasNext();){
				ArrayList<OntClass> occurs=new ArrayList<OntClass>();
				OntClass ontClass = i.next();
			//	System.out.println(ontClass.getLocalName());
				treenode=	showHierarchy(treenode,ontClass,occurs,owlFileName);
			}
			

		
		
	}
private TreeNodeDTO showHierarchy(TreeNodeDTO treenode, OntClass ontClass,List occurs,String owlFileName){
		
		if (ontClass.canAs( OntClass.class )  &&  !occurs.contains( ontClass )) {
			if(!ontClass.isRestriction()&& !ontClass.isAnon()){
        		
        		/**
        		 * check if the obj is already existed as siblings
        		 * if exited, not add this obj; if not existed, add.
        		 */
        		boolean existed=false;
        		List<TreeNodeDTO> siblings = treenode.getChildren();
        		if(null!=siblings&&!siblings.isEmpty()){
        	 	 for (TreeNodeDTO treeNode : siblings) {
					
				
     				String code=treeNode.getNodeDescription();
     				if(code.contains(ontClass.getModel().getGraph().getPrefixMapping().shortForm(ontClass.getURI()))){
         				existed=true;
         				break;
         			}
     			}}
        		else
        			{
        			siblings=new ArrayList<TreeNodeDTO>();
        			
        			}
        		if(!existed){
        			String localname=ontClass.getModel().getGraph().getPrefixMapping().shortForm(ontClass.getURI());
        			if(localname.startsWith(":")){
        				localname=localname.substring(1);
        			}
        			TreeNodeDTO subtreenode=new TreeNodeDTO();
        			subtreenode.setNodeDescription(localname);
        		    subtreenode.setName(localname);
        		    index++;
        		    subtreenode.setId(index);
        		    for (Iterator i = ontClass.listSubClasses( true );  i.hasNext(); ) {
    	                OntClass sub = (OntClass) i.next();
    	                // we push this expression on the occurs list before we recurse
    	                occurs.add( ontClass );
    	                subtreenode= showHierarchy(subtreenode,sub, occurs,owlFileName);
    	                occurs.remove( ontClass );
    	            }
        		    
        		    siblings.add(subtreenode);
        	
        			treenode.setChildren(siblings);
        			
        		
        			
        		}	
			}
			
			
		}	
		return treenode;
	}

public HashMap getJSONvalue()
{
	//JSONUtil jr  = new JSONUtil();
	HashMap hpropertyValues ;
	//System.out.println("formvalue@@@@@@@@@@@@@"+formvalue);
	try{
		 hpropertyValues = (HashMap) JSONUtil.read(formvalue);}
	catch(Exception e ){
		System.out.println("jason 格式错误！");
		e.printStackTrace();
		return null;
	}
	return hpropertyValues;
}

}

